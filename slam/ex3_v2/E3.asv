% Input: odo -> 2xT matrix containing odometry readings for T time steps
%        zind -> 1xT vector containing the observed landmark index for
%                T time steps; index is 0 if no landmark observed
%        z -> 1xT cell array containing the (range, bearing) observation
%             for T time steps; z{t} is empty if no observation at time t
%        V -> 2x2 matrix denoting the process noise in (forward, angular)
%        W -> 2x2 matrix denoting the sensing noise in (range, bearing)
%        x0 -> 3x1 vector denoting the initial vehicle state mean
%        P0 -> 3x3 matrix denoting the initial vehicle state covariance
% Output: x_est -> 1xT cell array containing the map state mean
%                  for T time steps (i.e., x_est{t} is a (3+2M)x1 vector,
%                  where M is the number of landmarks observed by time t)
%         P_est -> 1xT cell array containing the vehicle state covariance
%                  for T time steps (i.e., P_est{t} is a (3+2M)x(3+2M) matrix,
%                  where M is the number of landmarks observed by time t)
%         indices -> Mx1 vector containing the landmark index corresponding
%                    to the entries in the state vector, where M is the
%                    number of landmarks observed by the final time step T)
%                    For example, if indices is [15; 4], then the first
%                    three rows of x_est and P_est correspond to the
%                    vehicle state, the next two correspond to landmark 15,
%                    and the next two rows correspond to landmark 4, etc.

function [x_est, P_est, indices] = E3(odo, zind, z, V, W, x0, P0)
    function x_pred = new_pose(state_vec, odo_k)
        state_vec(1)= state_vec(1)+odo_k(1)*cos(state_vec(3));
        state_vec(2) = state_vec(2)+odo_k(1)*sin(state_vec(3));
        state_vec(3) = state_vec(3)+odo_k(2);
        x_pred = state_vec;
    end

    function fx = F_x(state_vec, odo)   
        f_xv = [
                1 0 -odo(1)*sin(state_vec(3));
                0 1 odo(1)*cos(state_vec(3));
                0 0 1
               ];
        f_m = [];
        if(size(state_vec, 1) > 3)
            f_m = eye(size(state_vec, 1) - 3);
        end
        fx = blkdiag(f_xv, f_m);
    end
    
    function fv = F_v(state_vec)
        fv_temp = zeros(size(state_vec, 1), 2);
        fv_temp(1:3, :) = [
                            cos(state_vec(3)) 0;
                            sin(state_vec(3)) 0;
                            0 1
                            ];
        fv = fv_temp;
    end

    function g = g_xz(veh_pos, sensor_obs)
        g = [
                veh_pos(1) + sensor_obs(1) * cos(veh_pos(3) + sensor_obs(2));
                veh_pos(2) + sensor_obs(1) * sin(veh_pos(3) + sensor_obs(2))
            ];
    end 
    
    function g_x = G_x(state_vec, sensor_obs)
        g_x = [
                    1 0 -sensor_obs(1)*sin(state_vec(3) + sensor_obs(2));
                    0 1 sensor_obs(1)*cos(state_vec(3) + sensor_obs(2))
               ];
    end
    function jacob_gz = G_z(state_vec, sensor_obs)
        jacob_gz = [ 
                cos(state_vec(3)+sensor_obs(2)) -sensor_obs(1)*sin(state_vec(3)+sensor_obs(2));
                sin(state_vec(3)+sensor_obs(2)) sensor_obs(1)*sin(state_vec(3)+sensor_obs(2))
            ];
    end
    
    function jacob_hp = H_p(state_vec, landmark_pos)
        r = norm(state_vec(1:2)-landmark_pos);;
        jacob_hp = [
                    (landmark_pos(1)-state_vec(1))/r (landmark_pos(2)-state_vec(2))/r;
                    -(landmark_pos(2)-state_vec(2))/(r*r) (landmark_pos(1)-state_vec(1))/(r*r) 
                ];
    end
    
    function H_x_jacob = H_x_v(v_state, landmark_positon)
        r = norm(v_state(1:2)-landmark_positon);
        H_x_jacob = [
                        -(landmark_positon(1)-v_state(1))/r -(landmark_positon(2)-v_state(2))/r 0;
                        (landmark_positon(2)-v_state(2))/(r*r) -(landmark_positon(1)-v_state(1))/(r*r) -1
                    ];
    end
    function sensor_calc = sensor_cal(current_pose, landmark_loc)
        sensor_calc = [ 
                    sqrt((landmark_loc(2)-current_pose(2))^2 + (landmark_loc(1)-current_pose(1))^2);
                    angdiff(atan2((landmark_loc(2)-current_pose(2)),(landmark_loc(1)-current_pose(1))), current_pose(3)) 
            ];
    end
    
    all_indices = [];
    x_k1 = x0;
    p_k1 = P0;
    tracker = 1
    for step_idx = [1:length(z)]
        x_k1 = new_pose(x_k1, odo(:,step_idx));
        Fx = F_x(x_k1, odo(:,step_idx));
        Fv = F_v(x_k1);
        p_k1 = Fx*p_k1*Fx' + Fv*V*Fv';
        detected_landmark_index = zind(:, step_idx);
        if detected_landmark_index ~= 0
            % disp("landmark detected");
            g_xz_ = g_xz(x_k1(1:3,:), cell2mat(z(:, step_idx)));
            if ~ismember(detected_landmark_index, all_indices)
                all_indices = [all_indices;detected_landmark_index];
                x_k1 = [x_k1;g_xz_];
                Y_z = [
                        [eye(size(p_k1,1)) zeros(size(p_k1,1), 2)];
                        [G_x(x_k1, cell2mat(z(:, step_idx))) zeros(2, size(p_k1,1)-3) G_z(x_k1, cell2mat(z(:, step_idx)))] 
                        ];
                %disp(blkdiag(p_k1, W));
                p_k1 = Y_z*blkdiag(p_k1, W)*Y_z';
            else
                disp("known landmark");
                local_landmark_index = find(all_indices==detected_landmark_index);
                h_pi = H_p(x_k1, g_xz_);
                h_xl = zeros(2, 2*size(all_indices, 1));
                h_xl(:,2*local_landmark_index-1:2*local_landmark_index) = h_pi;
                H_x = [H_x_v(x_k1, g_xz_) h_xl];
                prev_landmark_position = [x_k1(2*local_landmark_index+2); x_k1(2*local_landmark_index+3)];
                nue = cell2mat(z(:,step_idx)) - sensor_cal(x_k1,prev_landmark_position);
                S = H_x*p_k1*H_x' + eye(2)*W*eye(2)';
                gain = p_k1*H_x'*inv(S);
                x_k1 = x_k1 + gain*nue;
                p_k1 = p_k1 - gain * H_x * p_k1;
            end
        else
            disp("no lanmark detected");
        end
        x_est{step_idx} = x_k1;
        P_est{step_idx} = p_k1;
        disp(size(x_k1));
        disp(size(x_k1));
    end
    
    indices = all_indices;
end